import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime

# ✅ استيراد الملفات المساعدة
from real_fetcher import fetch_real_data
from data_config import الأسعار_الحالية, آخر_تحديث, مناطق_حقيقية

# 🏡 واجهة التطبيق
st.set_page_config(page_title="منصة وردة العقارية", page_icon="🏠", layout="wide")

st.title("🏠 منصة وردة العقارية")
st.markdown("### اكتشف أحدث الأسعار العقارية في السعودية 🇸🇦")

# ✅ إظهار تاريخ آخر تحديث للبيانات المحلية
st.sidebar.info(f"📅 آخر تحديث يدوي للبيانات: {آخر_تحديث}")

# 🏙️ اختيار المدينة ونوع العقار
المدينة = st.selectbox("اختر المدينة:", list(الأسعار_الحالية.keys()))
نوع_العقار = st.selectbox("اختر نوع العقار:", ["شقق", "فلل", "مكاتب"])
الحي = st.selectbox("اختر الحي:", مناطق_حقيقية.get(المدينة, []))

# 🔍 زر إنشاء التقرير
if st.button("🔎 إنشاء التقرير الآن"):
    with st.spinner("جاري جلب وتحليل البيانات..."):
        try:
            # محاولة جلب بيانات حقيقية من الإنترنت
            نتائج = fetch_real_data(المدينة, نوع_العقار)
        except Exception as e:
            نتائج = None
            st.error(f"⚠️ حدث خطأ أثناء الجلب من الإنترنت: {e}")

        # ✅ إذا فشل الجلب نستعمل البيانات المحلية
        if not نتائج:
            st.warning("⚠️ لم يتمكن التطبيق من جلب بيانات مباشرة، سيتم استخدام البيانات المحلية الحالية.")
            بيانات = الأسعار_الحالية[المدينة][نوع_العقار]
        else:
            بيانات = نتائج

        # 💰 عرض النتائج
        st.success(f"📊 تم إعداد التقرير لمدينة **{المدينة}** - نوع العقار **{نوع_العقار}**")

        col1, col2, col3 = st.columns(3)
        col1.metric("💰 متوسط السعر", f"{بيانات['متوسط_السعر']:,} ريال")
        col2.metric("📈 أعلى سعر", f"{بيانات['نطاق_السعر'][1]:,} ريال")
        col3.metric("📉 أقل سعر", f"{بيانات['نطاق_السعر'][0]:,} ريال")

        # 🔢 إنشاء بيانات تحليلية وهمية حول الأسعار
        np.random.seed(42)
        data = pd.DataFrame({
            "السعر": np.random.normal(بيانات["متوسط_السعر"], بيانات["متوسط_السعر"] * 0.2, 100).astype(int),
            "الحي": np.random.choice(مناطق_حقيقية[المدينة], 100)
        })

        # 📊 رسم بياني
        st.markdown("### توزيع الأسعار حسب الأحياء 📍")
        st.bar_chart(data.groupby("الحي")["السعر"].mean())

        # 🧠 تنبؤ بسيط بالذكاء الاصطناعي (نموذج تجريبي)
        st.markdown("### 🤖 التنبؤ الذكي بسعر العقار القادم:")
        التنبؤ = round(بيانات["متوسط_السعر"] * np.random.uniform(0.95, 1.10))
        st.info(f"🔮 من المتوقع أن يكون السعر القادم في {الحي} حوالي **{التنبؤ:,} ريال**")

        st.caption("💡 ملاحظة: هذه التنبؤات تعتمد على تحليل البيانات الحالية وق
